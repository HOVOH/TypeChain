/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Listener } from "@ethersproject/providers";
import type { Event, EventFilter } from "ethers";
import { Provider as EthersProvider } from "@ethersproject/abstract-provider";
import { BlockTag, Provider } from "ethcall";
import { JsonFragmentType } from "@ethersproject/abi";

export interface TypedEvent<
  TArgsArray extends Array<any> = any,
  TArgsObject = any
  > extends Event {
  args: TArgsArray & TArgsObject;
}

export interface TypedEventFilter<_TEvent extends TypedEvent>
  extends EventFilter {}

export interface TypedListener<TEvent extends TypedEvent> {
  (...listenerArg: [...__TypechainArgsArray<TEvent>, TEvent]): void;
}

type __TypechainArgsArray<T> = T extends TypedEvent<infer U> ? U : never;

export interface OnEvent<TRes> {
  <TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
    listener: TypedListener<TEvent>
  ): TRes;
  (eventName: string, listener: Listener): TRes;
}

export type MinEthersFactory<C, ARGS> = {
  deploy(...a: ARGS[]): Promise<C>;
};

export type GetContractTypeFromFactory<F> = F extends MinEthersFactory<
    infer C,
    any
    >
  ? C
  : never;

export type GetARGsTypeFromFactory<F> = F extends MinEthersFactory<any, any>
  ? Parameters<F["deploy"]>
  : never;

export async function initMulticallProvider(ethersProvider: EthersProvider) {
  const provider = new Provider();
  await provider.init(ethersProvider);
  return provider as unknown as MulticallProvider;
}

export interface Call<T> {
  contract: {
    address: string;
  };
  name: string;
  inputs: readonly JsonFragmentType[];
  outputs: readonly JsonFragmentType[];
  params: any[];
}

export type MulticallProvider = AllProvider & TryAllProvider & TryEachProvider;

interface AllProvider {
  all<T1, T2>(calls: [Call<T1>, Call<T2>], block?: BlockTag): Promise<[T1, T2]>;
  all<T1, T2, T3>(calls: [Call<T1>, Call<T2>, Call<T3>], block?: BlockTag): Promise<[T1, T2, T3]>;
  all<T1, T2, T3, T4>(
    calls: [Call<T1>, Call<T2>, Call<T3>, Call<T4>], block?: BlockTag
  ): Promise<[T1, T2, T3, T4]>;
  all<T1, T2, T3, T4, T5>(
    calls: [Call<T1>, Call<T2>, Call<T3>, Call<T4>, Call<T5>], block?: BlockTag
  ): Promise<[T1, T2, T3, T4, T5]>;
  all<T1, T2, T3, T4, T5, T6>(
    calls: [Call<T1>, Call<T2>, Call<T3>, Call<T4>, Call<T5>, Call<T6>], block?: BlockTag
  ): Promise<[T1, T2, T3, T4, T5, T6]>;
  all<T1, T2, T3, T4, T5, T6, T7>(
    calls: [
      Call<T1>,
      Call<T2>,
      Call<T3>,
      Call<T4>,
      Call<T5>,
      Call<T6>,
      Call<T7>
    ], block?: BlockTag
  ): Promise<[T1, T2, T3, T4, T5, T6, T7]>;
  all<T1, T2, T3, T4, T5, T6, T7, T8>(
    calls: [
      Call<T1>,
      Call<T2>,
      Call<T3>,
      Call<T4>,
      Call<T5>,
      Call<T6>,
      Call<T7>,
      Call<T8>,
    ], block?: BlockTag
  ): Promise<[T1, T2, T3, T4, T5, T6, T7, T8]>;
  all<T1, T2, T3, T4, T5, T6, T7, T8, T9>(
    calls: [
      Call<T1>,
      Call<T2>,
      Call<T3>,
      Call<T4>,
      Call<T5>,
      Call<T6>,
      Call<T7>,
      Call<T8>,
      Call<T9>,
    ], block?: BlockTag
  ): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;
  all<T>(calls: Call<T>[], block?: BlockTag): Promise<T[]>;
}

interface TryAllProvider {
  tryAll<T1, T2>(calls: [Call<T1>, Call<T2>], block?: BlockTag): Promise<[T1|null, T2|null]>;
  tryAll<T1, T2, T3>(calls: [Call<T1>, Call<T2>, Call<T3>], block?: BlockTag): Promise<[T1|null, T2|null, T3|null]>;
  tryAll<T1, T2, T3, T4>(
    calls: [Call<T1>, Call<T2>, Call<T3>, Call<T4>], block?: BlockTag
  ): Promise<[T1|null, T2|null, T3|null, T4|null]>;
  tryAll<T1, T2, T3, T4, T5>(
    calls: [Call<T1>, Call<T2>, Call<T3>, Call<T4>, Call<T5>], block?: BlockTag
  ): Promise<[T1|null, T2|null, T3|null, T4|null, T5|null]>;
  tryAll<T1, T2, T3, T4, T5, T6>(
    calls: [Call<T1>, Call<T2>, Call<T3>, Call<T4>, Call<T5>, Call<T6>], block?: BlockTag
  ): Promise<[T1|null, T2|null, T3|null, T4|null, T5|null, T6|null]>;
  tryAll<T1, T2, T3, T4, T5, T6, T7>(
    calls: [
      Call<T1>,
      Call<T2>,
      Call<T3>,
      Call<T4>,
      Call<T5>,
      Call<T6>,
      Call<T7>
    ], block?: BlockTag
  ): Promise<[T1|null, T2|null, T3|null, T4|null, T5|null, T6|null, T7|null]>;
  tryAll<T1, T2, T3, T4, T5, T6, T7, T8>(
    calls: [
      Call<T1>,
      Call<T2>,
      Call<T3>,
      Call<T4>,
      Call<T5>,
      Call<T6>,
      Call<T7>,
      Call<T8>,
    ], block?: BlockTag
  ): Promise<[T1|null, T2|null, T3|null, T4|null, T5|null, T6|null, T7|null, T8|null]>;
  tryAll<T1, T2, T3, T4, T5, T6, T7, T8, T9>(
    calls: [
      Call<T1>,
      Call<T2>,
      Call<T3>,
      Call<T4>,
      Call<T5>,
      Call<T6>,
      Call<T7>,
      Call<T8>,
      Call<T9>,
    ], block?: BlockTag
  ): Promise<[T1|null, T2|null, T3|null, T4|null, T5|null, T6|null, T7|null, T8|null, T9|null]>;
  tryAll<T>(calls: Call<T>[], block?: BlockTag): Promise<(T|null)[]>;
}

interface TryEachProvider {
  tryEach<T1, T2>(calls: [Call<T1>, Call<T2>], canFail: boolean[], block?: BlockTag): Promise<[T1|null, T2|null]>;
  tryEach<T1, T2, T3>(calls: [Call<T1>, Call<T2>, Call<T3>], canFail: boolean[], block?: BlockTag): Promise<[T1|null, T2|null, T3|null]>;
  tryEach<T1, T2, T3, T4>(
    calls: [Call<T1>, Call<T2>, Call<T3>, Call<T4>], canFail: boolean[], block?: BlockTag
  ): Promise<[T1|null, T2|null, T3|null, T4|null]>;
  tryEach<T1, T2, T3, T4, T5>(
    calls: [Call<T1>, Call<T2>, Call<T3>, Call<T4>, Call<T5>], canFail: boolean[], block?: BlockTag
  ): Promise<[T1|null, T2|null, T3|null, T4|null, T5|null]>;
  tryEach<T1, T2, T3, T4, T5, T6>(
    calls: [Call<T1>, Call<T2>, Call<T3>, Call<T4>, Call<T5>, Call<T6>], canFail: boolean[], block?: BlockTag
  ): Promise<[T1|null, T2|null, T3|null, T4|null, T5|null, T6|null]>;
  tryEach<T1, T2, T3, T4, T5, T6, T7>(
    calls: [
      Call<T1>,
      Call<T2>,
      Call<T3>,
      Call<T4>,
      Call<T5>,
      Call<T6>,
      Call<T7>
    ], canFail: boolean[], block?: BlockTag
  ): Promise<[T1|null, T2|null, T3|null, T4|null, T5|null, T6|null, T7|null]>;
  tryEach<T1, T2, T3, T4, T5, T6, T7, T8>(
    calls: [
      Call<T1>,
      Call<T2>,
      Call<T3>,
      Call<T4>,
      Call<T5>,
      Call<T6>,
      Call<T7>,
      Call<T8>,
    ], canFail: boolean[], block?: BlockTag
  ): Promise<[T1|null, T2|null, T3|null, T4|null, T5|null, T6|null, T7|null, T8|null]>;
  tryEach<T1, T2, T3, T4, T5, T6, T7, T8, T9>(
    calls: [
      Call<T1>,
      Call<T2>,
      Call<T3>,
      Call<T4>,
      Call<T5>,
      Call<T6>,
      Call<T7>,
      Call<T8>,
      Call<T9>,
    ], canFail: boolean[], block?: BlockTag
  ): Promise<[T1|null, T2|null, T3|null, T4|null, T5|null, T6|null, T7|null, T8|null, T9|null]>;
  tryEach<T>(calls: Call<T>[], block?: BlockTag): Promise<(T|null)[]>;
}
